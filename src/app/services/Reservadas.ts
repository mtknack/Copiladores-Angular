import { Injectable } from '@angular/core';
import { ITabela, Tipo } from './ITabela';

@Injectable({
  providedIn: 'root', // Este serviço será injetado em toda a aplicação
})
export class Reservadas {
  private reservadas: ITabela[] = [];

  constructor() {
    this.inicializareservadas();
  }

  public buscaReservadas(token: string): ITabela | null {
    const reservada = this.reservadas.find((op) => op.textoOriginal === token);
    return reservada ? reservada : null;
  }

  private inicializareservadas() {
    this.reservadas = [
      { textoOriginal: 'abstract', token: PalavrasReservadas.ABSTRACT, tipo: Tipo.RESERVADA },
      { textoOriginal: 'assert', token: PalavrasReservadas.ASSERT, tipo: Tipo.RESERVADA },
      { textoOriginal: 'boolean', token: PalavrasReservadas.BOOLEAN, tipo: Tipo.RESERVADA },
      { textoOriginal: 'break', token: PalavrasReservadas.BREAK, tipo: Tipo.RESERVADA },
      { textoOriginal: 'byte', token: PalavrasReservadas.BYTE, tipo: Tipo.RESERVADA },
      { textoOriginal: 'case', token: PalavrasReservadas.CASE, tipo: Tipo.RESERVADA },
      { textoOriginal: 'catch', token: PalavrasReservadas.CATCH, tipo: Tipo.RESERVADA },
      { textoOriginal: 'char', token: PalavrasReservadas.CHAR, tipo: Tipo.RESERVADA },
      { textoOriginal: 'class', token: PalavrasReservadas.CLASS, tipo: Tipo.RESERVADA },
      { textoOriginal: 'const', token: PalavrasReservadas.CONST, tipo: Tipo.RESERVADA },
      { textoOriginal: 'continue', token: PalavrasReservadas.CONTINUE, tipo: Tipo.RESERVADA },
      { textoOriginal: 'default', token: PalavrasReservadas.DEFAULT, tipo: Tipo.RESERVADA },
      { textoOriginal: 'do', token: PalavrasReservadas.DO, tipo: Tipo.RESERVADA },
      { textoOriginal: 'double', token: PalavrasReservadas.DOUBLE, tipo: Tipo.RESERVADA },
      { textoOriginal: 'else', token: PalavrasReservadas.ELSE, tipo: Tipo.RESERVADA },
      { textoOriginal: 'extends', token: PalavrasReservadas.EXTENDS, tipo: Tipo.RESERVADA },
      { textoOriginal: 'false', token: PalavrasReservadas.FALSE, tipo: Tipo.RESERVADA },
      { textoOriginal: 'final', token: PalavrasReservadas.FINAL, tipo: Tipo.RESERVADA },
      { textoOriginal: 'finally', token: PalavrasReservadas.FINALLY, tipo: Tipo.RESERVADA },
      { textoOriginal: 'string', token: PalavrasReservadas.STRING, tipo: Tipo.RESERVADA },
      { textoOriginal: 'float', token: PalavrasReservadas.FLOAT, tipo: Tipo.RESERVADA },
      { textoOriginal: 'for', token: PalavrasReservadas.FOR, tipo: Tipo.RESERVADA },
      { textoOriginal: 'goto', token: PalavrasReservadas.GOTO, tipo: Tipo.RESERVADA },
      { textoOriginal: 'if', token: PalavrasReservadas.IF, tipo: Tipo.RESERVADA },
      { textoOriginal: 'implements', token: PalavrasReservadas.IMPLEMENTS, tipo: Tipo.RESERVADA },
      { textoOriginal: 'import', token: PalavrasReservadas.IMPORT, tipo: Tipo.RESERVADA },
      { textoOriginal: 'instanceof', token: PalavrasReservadas.INSTANCEOF, tipo: Tipo.RESERVADA },
      { textoOriginal: 'int', token: PalavrasReservadas.INT, tipo: Tipo.RESERVADA },
      { textoOriginal: 'interface', token: PalavrasReservadas.INTERFACE, tipo: Tipo.RESERVADA },
      { textoOriginal: 'long', token: PalavrasReservadas.LONG, tipo: Tipo.RESERVADA },
      { textoOriginal: 'native', token: PalavrasReservadas.NATIVE, tipo: Tipo.RESERVADA },
      { textoOriginal: 'new', token: PalavrasReservadas.NEW, tipo: Tipo.RESERVADA },
      { textoOriginal: 'null', token: PalavrasReservadas.NULL, tipo: Tipo.RESERVADA },
      { textoOriginal: 'package', token: PalavrasReservadas.PACKAGE, tipo: Tipo.RESERVADA },
      { textoOriginal: 'private', token: PalavrasReservadas.PRIVATE, tipo: Tipo.RESERVADA },
      { textoOriginal: 'protected', token: PalavrasReservadas.PROTECTED, tipo: Tipo.RESERVADA },
      { textoOriginal: 'public', token: PalavrasReservadas.PUBLIC, tipo: Tipo.RESERVADA },
      { textoOriginal: 'return', token: PalavrasReservadas.RETURN, tipo: Tipo.RESERVADA },
      { textoOriginal: 'short', token: PalavrasReservadas.SHORT, tipo: Tipo.RESERVADA },
      { textoOriginal: 'static', token: PalavrasReservadas.STATIC, tipo: Tipo.RESERVADA },
      { textoOriginal: 'strictfp', token: PalavrasReservadas.STRICTFP, tipo: Tipo.RESERVADA },
      { textoOriginal: 'super', token: PalavrasReservadas.SUPER, tipo: Tipo.RESERVADA },
      { textoOriginal: 'switch', token: PalavrasReservadas.SWITCH, tipo: Tipo.RESERVADA },
      { textoOriginal: 'synchronized', token: PalavrasReservadas.SYNCHRONIZED, tipo: Tipo.RESERVADA },
      { textoOriginal: 'this', token: PalavrasReservadas.THIS, tipo: Tipo.RESERVADA },
      { textoOriginal: 'throw', token: PalavrasReservadas.THROW, tipo: Tipo.RESERVADA },
      { textoOriginal: 'throws', token: PalavrasReservadas.THROWS, tipo: Tipo.RESERVADA },
      { textoOriginal: 'transient', token: PalavrasReservadas.TRANSIENT, tipo: Tipo.RESERVADA },
      { textoOriginal: 'true', token: PalavrasReservadas.TRUE, tipo: Tipo.RESERVADA },
      { textoOriginal: 'try', token: PalavrasReservadas.TRY, tipo: Tipo.RESERVADA },
      { textoOriginal: 'void', token: PalavrasReservadas.VOID, tipo: Tipo.RESERVADA },
      { textoOriginal: 'volatile', token: PalavrasReservadas.VOLATILE, tipo: Tipo.RESERVADA },
      { textoOriginal: 'while', token: PalavrasReservadas.WHILE, tipo: Tipo.RESERVADA },
      { textoOriginal: '+', token: PalavrasReservadas.ADD, tipo: Tipo.OP_ARITMETICO },
      { textoOriginal: '-', token: PalavrasReservadas.SUBTRACT, tipo: Tipo.OP_ARITMETICO },
      { textoOriginal: '*', token: PalavrasReservadas.MULTIPLY, tipo: Tipo.OP_ARITMETICO },
      { textoOriginal: '/', token: PalavrasReservadas.DIVIDE, tipo: Tipo.OP_ARITMETICO },
      { textoOriginal: '%', token: PalavrasReservadas.MODULO, tipo: Tipo.OP_ARITMETICO },
      { textoOriginal: '++', token: PalavrasReservadas.INCREMENT, tipo: Tipo.OP_ARITMETICO },
      { textoOriginal: '--', token: PalavrasReservadas.DECREMENT, tipo: Tipo.OP_ARITMETICO },
      { textoOriginal: '=', token: PalavrasReservadas.ASSIGN, tipo: Tipo.OP_ATRIBUICAO },
      { textoOriginal: '+=', token: PalavrasReservadas.ADD_ASSIGN, tipo: Tipo.OP_ATRIBUICAO },
      { textoOriginal: '-=', token: PalavrasReservadas.SUBTRACT_ASSIGN, tipo: Tipo.OP_ATRIBUICAO },
      { textoOriginal: '*=', token: PalavrasReservadas.MULTIPLY_ASSIGN, tipo: Tipo.OP_ATRIBUICAO },
      { textoOriginal: '/=', token: PalavrasReservadas.DIVIDE_ASSIGN, tipo: Tipo.OP_ATRIBUICAO },
      { textoOriginal: '%=', token: PalavrasReservadas.MODULO_ASSIGN, tipo: Tipo.OP_ATRIBUICAO },
      { textoOriginal: '<<=', token: PalavrasReservadas.LEFT_SHIFT_ASSIGN, tipo: Tipo.OP_ATRIBUICAO },
      { textoOriginal: '>>=', token: PalavrasReservadas.RIGHT_SHIFT_ASSIGN, tipo: Tipo.OP_ATRIBUICAO },
      { textoOriginal: '>>>=', token: PalavrasReservadas.UNSIGNED_RIGHT_SHIFT_ASSIGN, tipo: Tipo.OP_ATRIBUICAO },
      { textoOriginal: '&=', token: PalavrasReservadas.AND_ASSIGN, tipo: Tipo.OP_ATRIBUICAO },
      { textoOriginal: '|=', token: PalavrasReservadas.OR_ASSIGN, tipo: Tipo.OP_ATRIBUICAO },
      { textoOriginal: '^=', token: PalavrasReservadas.XOR_ASSIGN, tipo: Tipo.OP_ATRIBUICAO },
      { textoOriginal: '==', token: PalavrasReservadas.EQUALS, tipo: Tipo.OP_COMPARACAO },
      { textoOriginal: '!=', token: PalavrasReservadas.NOT_EQUALS, tipo: Tipo.OP_COMPARACAO },
      { textoOriginal: '<', token: PalavrasReservadas.LESS_THAN, tipo: Tipo.OP_COMPARACAO },
      { textoOriginal: '>', token: PalavrasReservadas.GREATER_THAN, tipo: Tipo.OP_COMPARACAO },
      { textoOriginal: '<=', token: PalavrasReservadas.LESS_THAN_OR_EQUALS, tipo: Tipo.OP_COMPARACAO },
      { textoOriginal: '>=', token: PalavrasReservadas.GREATER_THAN_OR_EQUALS, tipo: Tipo.OP_COMPARACAO },
      { textoOriginal: '&&', token: PalavrasReservadas.LOGICAL_AND, tipo: Tipo.OP_LOGICO },
      { textoOriginal: '||', token: PalavrasReservadas.LOGICAL_OR, tipo: Tipo.OP_LOGICO },
      { textoOriginal: '!', token: PalavrasReservadas.LOGICAL_NOT, tipo: Tipo.OP_LOGICO },
      { textoOriginal: ';', token: PalavrasReservadas.SEMICOLON, tipo: Tipo.PONTUACAO },
      { textoOriginal: ',', token: PalavrasReservadas.COMMA, tipo: Tipo.PONTUACAO },
      { textoOriginal: '.', token: PalavrasReservadas.PERIOD, tipo: Tipo.PONTUACAO },
      { textoOriginal: '(', token: PalavrasReservadas.LEFT_PARENTHESIS, tipo: Tipo.PONTUACAO },
      { textoOriginal: ')', token: PalavrasReservadas.RIGHT_PARENTHESIS, tipo: Tipo.PONTUACAO },
      { textoOriginal: '{', token: PalavrasReservadas.LEFT_BRACE, tipo: Tipo.PONTUACAO },
      { textoOriginal: '}', token: PalavrasReservadas.RIGHT_BRACE, tipo: Tipo.PONTUACAO },
      { textoOriginal: '[', token: PalavrasReservadas.LEFT_BRACKET, tipo: Tipo.PONTUACAO },
      { textoOriginal: ']', token: PalavrasReservadas.RIGHT_BRACKET, tipo: Tipo.PONTUACAO },
      { textoOriginal: ':', token: PalavrasReservadas.COLON, tipo: Tipo.PONTUACAO }
    ];
  }
}

export enum PalavrasReservadas {
  ABSTRACT = 'ABSTRACT',
  ASSERT = 'ASSERT',
  BOOLEAN = 'BOOLEAN',
  BREAK = 'BREAK',
  BYTE = 'BYTE',
  CASE = 'CASE',
  CATCH = 'CATCH',
  CHAR = 'CHAR',
  CLASS = 'CLASS',
  CONST = 'CONST',
  CONTINUE = 'CONTINUE',
  DEFAULT = 'DEFAULT',
  DO = 'DO',
  DOUBLE = 'DOUBLE',
  ELSE = 'ELSE',
  EXTENDS = 'EXTENDS',
  FALSE = 'FALSE',
  FINAL = 'FINAL',
  FINALLY = 'FINALLY',
  STRING = 'STRING',
  FLOAT = 'FLOAT',
  FOR = 'FOR',
  GOTO = 'GOTO',
  IF = 'IF',
  IMPLEMENTS = 'IMPLEMENTS',
  IMPORT = 'IMPORT',
  INSTANCEOF = 'INSTANCEOF',
  INT = 'INT',
  INTERFACE = 'INTERFACE',
  LONG = 'LONG',
  NATIVE = 'NATIVE',
  NEW = 'NEW',
  NULL = 'NULL',
  PACKAGE = 'PACKAGE',
  PRIVATE = 'PRIVATE',
  PROTECTED = 'PROTECTED',
  PUBLIC = 'PUBLIC',
  RETURN = 'RETURN',
  SHORT = 'SHORT',
  STATIC = 'STATIC',
  STRICTFP = 'STRICTFP',
  SUPER = 'SUPER',
  SWITCH = 'SWITCH',
  SYNCHRONIZED = 'SYNCHRONIZED',
  THIS = 'THIS',
  THROW = 'THROW',
  THROWS = 'THROWS',
  TRANSIENT = 'TRANSIENT',
  TRUE = 'TRUE',
  TRY = 'TRY',
  VOID = 'VOID',
  VOLATILE = 'VOLATILE',
  WHILE = 'WHILE',
  ADD = 'ADD',
  SUBTRACT = 'SUBTRACT',
  MULTIPLY = 'MULTIPLY',
  DIVIDE = 'DIVIDE',
  MODULO = 'MODULO',
  INCREMENT = 'INCREMENT',
  DECREMENT = 'DECREMENT',
  ASSIGN = 'ASSIGN',
  ADD_ASSIGN = 'ADD_ASSIGN',
  SUBTRACT_ASSIGN = 'SUBTRACT_ASSIGN',
  MULTIPLY_ASSIGN = 'MULTIPLY_ASSIGN',
  DIVIDE_ASSIGN = 'DIVIDE_ASSIGN',
  MODULO_ASSIGN = 'MODULO_ASSIGN',
  LEFT_SHIFT_ASSIGN = 'LEFT_SHIFT_ASSIGN',
  RIGHT_SHIFT_ASSIGN = 'RIGHT_SHIFT_ASSIGN',
  UNSIGNED_RIGHT_SHIFT_ASSIGN = 'UNSIGNED_RIGHT_SHIFT_ASSIGN',
  AND_ASSIGN = 'AND_ASSIGN',
  OR_ASSIGN = 'OR_ASSIGN',
  XOR_ASSIGN = 'XOR_ASSIGN',
  EQUALS = 'EQUALS',
  NOT_EQUALS = 'NOT_EQUALS',
  LESS_THAN = 'LESS_THAN',
  GREATER_THAN = 'GREATER_THAN',
  LESS_THAN_OR_EQUALS = 'LESS_THAN_OR_EQUALS',
  GREATER_THAN_OR_EQUALS = 'GREATER_THAN_OR_EQUALS',
  LOGICAL_AND = 'LOGICAL_AND',
  LOGICAL_OR = 'LOGICAL_OR',
  LOGICAL_NOT = 'LOGICAL_NOT',
  SEMICOLON = 'SEMICOLON',
  COMMA = 'COMMA',
  PERIOD = 'PERIOD',
  LEFT_PARENTHESIS = 'LEFT_PARENTHESIS',
  RIGHT_PARENTHESIS = 'RIGHT_PARENTHESIS',
  LEFT_BRACE = 'LEFT_BRACE',
  RIGHT_BRACE = 'RIGHT_BRACE',
  LEFT_BRACKET = 'LEFT_BRACKET',
  RIGHT_BRACKET = 'RIGHT_BRACKET',
  COLON = 'COLON'
};
